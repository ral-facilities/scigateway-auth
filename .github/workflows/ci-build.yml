name: CI
on:
  workflow_dispatch:
  pull_request:
  push:
    # TODO - Change this to main before merging k8s-deployment into main
    branches:
      - k8s-deployment
jobs:
  tests:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9']
    name: Python ${{ matrix.python-version }} Build & Tests
    steps:
    - name: Add apt repo
      run: sudo add-apt-repository universe

    # Setup Python
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    # Checkout repo
    - name: Checkout repo
      uses: actions/checkout@v2

    # Prep for the tests
    - name: Create log file
      run: touch logs.log
    - name: Configure log file location
      run: echo "`jq -r --arg REPO_DIR "$GITHUB_WORKSPACE/logs.log" \
        '.log_location=$REPO_DIR' scigateway_auth/config.json.example`" > scigateway_auth/config.json.example
    - name: Create config.json
      run: cp scigateway_auth/config.json.example scigateway_auth/config.json

    # Install Nox, Poetry and API's dependencies
    - name: Install Nox
      run: pip install nox==2020.8.22
    - name: Install Poetry
      run: pip install poetry==1.1.9
    - name: Install dependencies
      run: poetry install

    # Run Nox tests session, saves and uploads a coverage report to codecov
    - name: Run Nox tests session
      run: nox -s tests -- --cov=scigateway_auth --cov-report=xml
    - name: Upload code coverage report
      if: matrix.python-version == '3.6'
      uses: codecov/codecov-action@v1

  linting:
    runs-on: ubuntu-20.04
    name: Linting
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
        architecture: x64
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install Nox
      run: pip install nox==2020.8.22
    - name: Install Poetry
      run: pip install poetry==1.1.9

    - name: Run Nox lint session
      run: nox -s lint

  formatting:
    runs-on: ubuntu-20.04
    name: Code Formatting
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
        architecture: x64
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install Nox
      run: pip install nox==2020.8.22
    - name: Install Poetry
      run: pip install poetry==1.1.9

    - name: Run Nox black session
      run: nox -s black

  safety:
    runs-on: ubuntu-20.04
    name: Dependency Safety
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
        architecture: x64
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Install Nox
      run: pip install nox==2020.8.22
    - name: Install Poetry
      run: pip install poetry==1.1.9

    - name: Run Nox safety session
      run: nox -s safety

  docker:
    needs: [tests, linting, formatting, safety]
    name: Docker
    runs-on: ubuntu-20.04
    steps:
    - name: Check out repo
      uses: actions/checkout@v2

    - name: Login to Harbor
      uses: docker/login-action@v1
      with:
        registry: harbor.stfc.ac.uk/datagateway
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: harbor.stfc.ac.uk/datagateway/scigateway-auth

    - name: ${{ github.event_name == 'push' && github.ref == 'refs/heads/k8s-deployment' && 'Build and push Docker image to Harbor' || 'Build Docker image' }}
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/k8s-deployment' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
