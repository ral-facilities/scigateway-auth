openapi: 3.0.0
info:
  description: scigateway authentication api
  title: scigateway-auth
  version: "0"
servers:
  - url: http://localhost:5000
paths:
  /verify:
    post:
      summary: Given a JWT, verify that it is a valid JWT (e.g. signed by us, not expired etc.)
      requestBody:
        description: The JWT that is to be verified by the api.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: xxxxx.yyyyy.zzzzz
      responses:
        "200":
          description: When the token is valid
        "400":
          description: When a bad request is sent
        "401":
          description: When no post body is sent
        "403":
          description: When the token is not valid
  /refresh:
    post:
      summary: Use a refresh token to generate a new access token from an old one
      parameters:
        - in: cookie
          name: scigateway:refresh_token
          schema:
            type: string
            example: xxxxx.yyyyy.zzzzz
      requestBody:
        description: The old access token that needs refreshing
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "xxxxx.yyyyy.zzzzz"
      responses:
        "200":
          description: A new access token
          content:
            application/json:
              schema:
                type: string
                example: xxxxx.yyyyy.zzzzz
        "400":
          description: When either the refresh token or access token are missing
        "403":
          description: When either the refresh token is unauthorized or the access token is unable to be refreshed
  /login:
    post:
      summary: Given a mnemonic and credentials, attempt to authenticate the user
      requestBody:
        description: The mnemonic and credentials to be used to login and obtain a session
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mnemonic: 
                  type: string
                  example: uows
                credentials:
                  type: object
                  properties:
                    username:
                      type: string
                      example: user
                    password:
                      type: string
                      example: password
      responses:
        "200":
          description: A JWT
          content:
            application/json:
              schema:
                type: string
                example: xxxxx.yyyyy.zzzzz

        "400":
          description: When a bad request is sent
        "401":
          description: When no post body is sent
        "403":
          description: When bad credentials are provided
  /authenticators:
    get:
      summary: Returns a list of valid ICAT authenticators
      responses:
        "200":
          description: The list of ICAT authenticators
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - mnemonic
                    - keys
                  properties:
                    mnemonic: 
                      type: string
                      example: ldap
                    keys:
                      type: array
                      items:
                        type: object
                        required:
                          - name
                        properties:
                          name: 
                            type: string
                            example: username
                          hidden: 
                            type: boolean
                            default: false
                    friendly:
                      type: string
                      example: LDAP
                    admin:
                      type: boolean
                      default: false
                
        "500":
          description: When the call to ICAT fails

  /maintenace:
    get:
      summary: Returns a JSON object that represents the maintenance mode state
      responses:
        "200":
          description: The maintenance mode state in form of a JSON object
          content:
            application/json:
              schema:
                type: object
                required:
                  - show
                  - message
                properties:
                  show:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Sorry, we are down for scheduled maintenance
        "500":
          description: When maintenance mode state retrieval fails
    put:
      summary: Updates the maintenance mode state given an access token and a state
      requestBody:
        description: The access token and state to be used to verify the user and update the maintenance mode state with
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: xxxxx.yyyyy.zzzzz
                maintenance:
                  type: object
                  properties:
                    show:
                      type: boolean
                      example: true
                    message:
                      type: string
                      example: Sorry, we are down for scheduled maintenance.
      responses:
        "200":
          description: When state update is successful
        "400":
          description: When the JSON data is invalid
        "403":
          description: When the access token is invalid or the user is not admin
        "500":
          description: When an error occurs while the JSON file is updated
  /scheduled_maintenace:
    get:
      summary: Returns a JSON object that represents the scheduled maintenance mode state
      responses:
        "200":
          description: The scheduled maintenance mode state in form of a JSON object
          content:
            application/json:
              schema:
                type: object
                required:
                  - show
                  - message
                properties:
                  show:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Maintenance scheduled for tomorrow at 12:00
        "500":
          description: When maintenance scheduled mode state retrieval fails
    put:
      summary: Updates the scheduled maintenance mode state given an access token and a state
      requestBody:
        description: The access token and state to be used to verify the user and update the scheduled maintenance mode state with
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: xxxxx.yyyyy.zzzzz
                scheduledMmaintenance:
                  type: object
                  properties:
                    show:
                      type: boolean
                      example: true
                    message:
                      type: string
                      example: Maintenance scheduled for tomorrow at 13:00
      responses:
        "200":
          description: When state update is successful
        "400":
          description: When the JSON data is invalid
        "403":
          description: When the access token is invalid or the user is not admin
        "500":
          description: When an error occurs while the JSON file is updated
